// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CloneCreated extends ethereum.Event {
  get params(): CloneCreated__Params {
    return new CloneCreated__Params(this);
  }
}

export class CloneCreated__Params {
  _event: CloneCreated;

  constructor(event: CloneCreated) {
    this._event = event;
  }

  get cloneAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deployer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get royaltyReceiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get royaltyFeeNumerator(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class XmutantFactory extends ethereum.SmartContract {
  static bind(address: Address): XmutantFactory {
    return new XmutantFactory("XmutantFactory", address);
  }

  createClone(
    name: string,
    symbol: string,
    initialOwner: Address,
    maxSupply: BigInt,
    contractURI_: string,
    royaltyReceiver: Address,
    royaltyFeeNumerator: BigInt,
    salt: Bytes,
  ): Address {
    let result = super.call(
      "createClone",
      "createClone(string,string,address,uint256,string,address,uint96,bytes32):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(initialOwner),
        ethereum.Value.fromUnsignedBigInt(maxSupply),
        ethereum.Value.fromString(contractURI_),
        ethereum.Value.fromAddress(royaltyReceiver),
        ethereum.Value.fromUnsignedBigInt(royaltyFeeNumerator),
        ethereum.Value.fromFixedBytes(salt),
      ],
    );

    return result[0].toAddress();
  }

  try_createClone(
    name: string,
    symbol: string,
    initialOwner: Address,
    maxSupply: BigInt,
    contractURI_: string,
    royaltyReceiver: Address,
    royaltyFeeNumerator: BigInt,
    salt: Bytes,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createClone",
      "createClone(string,string,address,uint256,string,address,uint96,bytes32):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(initialOwner),
        ethereum.Value.fromUnsignedBigInt(maxSupply),
        ethereum.Value.fromString(contractURI_),
        ethereum.Value.fromAddress(royaltyReceiver),
        ethereum.Value.fromUnsignedBigInt(royaltyFeeNumerator),
        ethereum.Value.fromFixedBytes(salt),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployerToClones(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "deployerToClones",
      "deployerToClones(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toAddress();
  }

  try_deployerToClones(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployerToClones",
      "deployerToClones(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBaseTokenURI(): string {
    let result = super.call(
      "getBaseTokenURI",
      "getBaseTokenURI():(string)",
      [],
    );

    return result[0].toString();
  }

  try_getBaseTokenURI(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getBaseTokenURI",
      "getBaseTokenURI():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getDeployerClones(deployer: Address): Array<Address> {
    let result = super.call(
      "getDeployerClones",
      "getDeployerClones(address):(address[])",
      [ethereum.Value.fromAddress(deployer)],
    );

    return result[0].toAddressArray();
  }

  try_getDeployerClones(
    deployer: Address,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getDeployerClones",
      "getDeployerClones(address):(address[])",
      [ethereum.Value.fromAddress(deployer)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  xmutantImplementation(): Address {
    let result = super.call(
      "xmutantImplementation",
      "xmutantImplementation():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_xmutantImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "xmutantImplementation",
      "xmutantImplementation():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get baseTokenURI_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateCloneCall extends ethereum.Call {
  get inputs(): CreateCloneCall__Inputs {
    return new CreateCloneCall__Inputs(this);
  }

  get outputs(): CreateCloneCall__Outputs {
    return new CreateCloneCall__Outputs(this);
  }
}

export class CreateCloneCall__Inputs {
  _call: CreateCloneCall;

  constructor(call: CreateCloneCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get initialOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get maxSupply(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get contractURI_(): string {
    return this._call.inputValues[4].value.toString();
  }

  get royaltyReceiver(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get royaltyFeeNumerator(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get salt(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class CreateCloneCall__Outputs {
  _call: CreateCloneCall;

  constructor(call: CreateCloneCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetBaseTokenURICall extends ethereum.Call {
  get inputs(): SetBaseTokenURICall__Inputs {
    return new SetBaseTokenURICall__Inputs(this);
  }

  get outputs(): SetBaseTokenURICall__Outputs {
    return new SetBaseTokenURICall__Outputs(this);
  }
}

export class SetBaseTokenURICall__Inputs {
  _call: SetBaseTokenURICall;

  constructor(call: SetBaseTokenURICall) {
    this._call = call;
  }

  get baseTokenURI_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseTokenURICall__Outputs {
  _call: SetBaseTokenURICall;

  constructor(call: SetBaseTokenURICall) {
    this._call = call;
  }
}
